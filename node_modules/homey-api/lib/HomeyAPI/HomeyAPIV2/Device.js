'use strict';

const Util = require('../../Util');
const Item = require('./Item');
const DeviceCapability = require('./DeviceCapability');

class Device extends Item {

  constructor(...props) {
    super(...props);

    // Set URI
    Object.defineProperty(this, 'uri', {
      value: `homey:device:${this.id}`,
      enumerable: false,
      writable: true,
    });

    // Set Connected
    Object.defineProperty(this, '__connected', {
      value: false,
      enumerable: false,
      writable: true,
    });

    // Set Capability Instances
    Object.defineProperty(this, '__capabilityInstances', {
      value: {},
      enumerable: false,
      writable: true,
    });
  }

  /**
   * Creates an {@link HomeyAPIV2.DeviceCapability} for realtime capability updates.
   * @param {string} capabilityId
   * @param {Function} listener
   * @param {number|boolean|string} listener.value
   * @returns {HomeyAPIV2.ManagerDevices.Device.DeviceCapability}
   * @function HomeyAPIV2.ManagerDevices.Device#makeCapabilityInstance
   */
  makeCapabilityInstance(capabilityId, listener) {
    this.connect().catch(err => {
      this.__debug(err);
    });

    const instance = new DeviceCapability({
      listener,
      id: capabilityId,
      device: this,
    });

    instance.once('destroy', () => {
      this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId] || [];
      this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId].filter(i => i !== instance);

      if (Object.keys(this.__capabilityInstances[capabilityId]).length === 0) {
        this.__debug('No more Capability instances, disconnecting...');
        this.disconnect().catch(err => this.__debug(err));
      }
    });

    this.__capabilityInstances[capabilityId] = this.__capabilityInstances[capabilityId] || [];
    this.__capabilityInstances[capabilityId].push(instance);

    return instance;
  }

  /**
   * Sets a capability's value.
   * @param {object} opts
   * @param {string} opts.capabilityId
   * @param {number|boolean|string} opts.value
   * @param {object} [opts.opts]
   * @param {number} [opts.opts.duration]
   * @returns {Promise<void>}
   * @function HomeyAPIV2.ManagerDevices.Device#setCapabilityValue
   */
  async setCapabilityValue(options, ...args) {
    // Legacy compatibility from node-athom-api
    if (typeof options === 'string') {
      return this.setCapabilityValueLegacy(options, ...args);
    }

    return this.__setCapabilityValue(options);
  }

  async __setCapabilityValue({
    capabilityId,
    value,
    opts,
    transactionId = `homey-api-${Util.uuid()}`,
    transactionTime = Date.now(),
  }) {
    return this.manager.setCapabilityValue({
      deviceId: this.id,
      capabilityId,
      value,
      opts,
      transactionId,
      transactionTime,
    });
  }

  async setCapabilityValueLegacy(capabilityId, value, opts) {
    return this.__setCapabilityValue({
      capabilityId,
      value,
      opts,
    });
  }

  async connect() {
    this.__debug('connect');

    if (!this.io) {
      this.io = await this.homey.subscribe(this.uri, {
        onConnect: () => {
          this.__debug('onConnect');
          this.__connected = true;
        },
        onDisconnect: () => {
          this.__debug('onDisconnect');
          this.__connected = false;
        },
        onEvent: (event, data) => {
          // // Fire event listeners
          if (Array.isArray(this.__listeners[event])) {
            this.__listeners[event].forEach(listener => listener(data));
          }
        },
      });
    }
  }

  async disconnect() {
    this.__debug('disconnect');

    if (this.io) {
      this.io.unsubscribe();
    }
  }

}

module.exports = Device;
